diff --git a/CMakeLists.txt b/CMakeLists.txt
index f243055990..cec94fed70 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -7,6 +7,8 @@ option(WITH_CUDA "Enable CUDA support" OFF)
 option(WITH_MPS "Enable MPS support" OFF)
 option(WITH_PNG "Enable features requiring LibPNG." ON)
 option(WITH_JPEG "Enable features requiring LibJPEG." ON)
+option(WITH_ZLIB "Enable features requiring libZLIB." ON)
+option(WITH_FFMPEG "Enable features requiring FFMPEG libs." ON)
 # Libwebp is disabled by default, which means enabling it from cmake is largely
 # untested. Since building from cmake is very low pri anyway, this is OK. If
 # you're a user and you need this, please open an issue (and a PR!).
@@ -91,7 +93,8 @@ include(CMakePackageConfigHelpers)
 
 set(TVCPP torchvision/csrc)
 list(APPEND ALLOW_LISTED ${TVCPP} ${TVCPP}/io/image ${TVCPP}/io/image/cpu ${TVCPP}/io/image/cpu/giflib ${TVCPP}/models ${TVCPP}/ops
-  ${TVCPP}/ops/autograd ${TVCPP}/ops/cpu ${TVCPP}/io/image/cuda)
+  ${TVCPP}/ops/autograd ${TVCPP}/ops/cpu ${TVCPP}/io/image/cuda ${TVCPP}/io/video_reader
+	${TVCPP}/io/decoder ${TVCPP}/io/video)
 if(WITH_CUDA)
     list(APPEND ALLOW_LISTED ${TVCPP}/ops/cuda ${TVCPP}/ops/autocast)
 endif()
@@ -103,29 +106,51 @@ FOREACH(DIR ${ALLOW_LISTED})
     file(GLOB ALL_SOURCES ${ALL_SOURCES} ${DIR}/*.*)
 ENDFOREACH()
 
-add_library(${PROJECT_NAME} SHARED ${ALL_SOURCES})
-target_link_libraries(${PROJECT_NAME} PRIVATE ${TORCH_LIBRARIES})
+list(FILTER ALL_SOURCES EXCLUDE REGEX ".*_test\.cpp")
+
+add_library(${PROJECT_NAME} STATIC ${ALL_SOURCES})
+target_link_libraries(${PROJECT_NAME} PUBLIC ${TORCH_LIBRARIES})
+
+
+if (WITH_ZLIB)
+    target_link_libraries(${PROJECT_NAME} PUBLIC /zlib/install/lib/libz.a)
+endif()
+
 
 if(WITH_MPS)
   find_library(metal NAMES Metal)
   find_library(foundation NAMES Foundation)
-  target_link_libraries(${PROJECT_NAME} PRIVATE ${metal} ${foundation})
+  target_link_libraries(${PROJECT_NAME} PUBLIC ${metal} ${foundation})
 endif()
 
 if (WITH_PNG)
-    target_link_libraries(${PROJECT_NAME} PRIVATE ${PNG_LIBRARY})
+    target_link_libraries(${PROJECT_NAME} PUBLIC ${PNG_LIBRARY})
 endif()
 
 if (WITH_JPEG)
-    target_link_libraries(${PROJECT_NAME} PRIVATE ${JPEG_LIBRARIES})
+    target_link_libraries(${PROJECT_NAME} PUBLIC ${JPEG_LIBRARIES})
 endif()
 
 if (WITH_WEBP)
-    target_link_libraries(${PROJECT_NAME} PRIVATE ${WEBP_LIBRARIES})
+    target_link_libraries(${PROJECT_NAME} PUBLIC ${WEBP_LIBRARIES})
 endif()
 
 if (WITH_AVIF)
-    target_link_libraries(${PROJECT_NAME} PRIVATE ${AVIF_LIBRARIES})
+    target_link_libraries(${PROJECT_NAME} PUBLIC ${AVIF_LIBRARIES})
+endif()
+
+if (WITH_FFMPEG)
+  set(FFMPEG_LIBS
+    avformat
+    avcodec
+    avutil
+    swresample
+    swscale
+  )
+  foreach(FFMPEG_LIB IN LISTS FFMPEG_LIBS)
+    target_link_libraries(${PROJECT_NAME} PUBLIC ${FFMPEG_DIR}/lib/lib${FFMPEG_LIB}.a)
+  endforeach()
+  include_directories(${FFMPEG_DIR}/include)
 endif()
 
 set_target_properties(${PROJECT_NAME} PROPERTIES
@@ -150,6 +175,49 @@ if (WITH_AVIF)
     include_directories(${AVIF_INCLUDE_DIRS})
 endif()
 
+include_directories(torchvision/csrc/io/image)
+include_directories(torchvision/csrc/io/image/cpu)
+include_directories(torchvision/csrc/io/video_reader)
+include_directories(torchvision/csrc/io/decoder)
+include_directories(torchvision/csrc/io/video)
+include_directories(${TORCH_INCLUDE_DIRS})
+
+set(FUZZ_TARGETS
+  decode_jpeg
+  decode_png
+  encode_jpeg
+  encode_png
+  video_reader
+)
+
+foreach(FUZZ_TARGET IN LISTS FUZZ_TARGETS)
+  add_executable(${FUZZ_TARGET}_${SUFFIX} ${CMAKE_SOURCE_DIR}/${FUZZ_TARGET}.cc)
+  target_link_libraries(${FUZZ_TARGET}_${SUFFIX} PUBLIC ${PROJECT_NAME} ${CMAKE_DL_LIBS} pthread rt ${ENGINE})
+  target_link_libraries(${FUZZ_TARGET}_${SUFFIX} PUBLIC  /zlib/install/lib/libz.a)
+  if(FUZZ_TARGET STREQUAL "video_reader")
+    target_link_libraries(${FUZZ_TARGET}_${SUFFIX} PUBLIC lzma)
+  endif()
+  add_dependencies(${FUZZ_TARGET}_${SUFFIX} ${PROJECT_NAME})
+  set_target_properties(${FUZZ_TARGET}_${SUFFIX} PROPERTIES BUILD_WITH_INSTALL_RPATH ON)
+  install(TARGETS ${FUZZ_TARGET}_${SUFFIX} DESTINATION /)
+endforeach()
+
+if (BUILD_SAVERS)
+  set(SAVERS
+    save_jpeg
+    save_png
+  )
+
+  foreach(SAVER IN LISTS SAVERS)
+    add_executable(${SAVER} ${CMAKE_SOURCE_DIR}/${SAVER}.cc)
+    target_link_libraries(${SAVER} PRIVATE ${PROJECT_NAME} ${CMAKE_DL_LIBS} pthread rt)
+    target_link_libraries(${SAVER} PUBLIC  /zlib/install/lib/libz.a)
+    add_dependencies(${SAVER} ${PROJECT_NAME})
+    set_target_properties(${SAVER} PROPERTIES BUILD_WITH_INSTALL_RPATH ON)
+    install(TARGETS ${SAVER} DESTINATION /)
+  endforeach()
+endif()
+
 set(TORCHVISION_CMAKECONFIG_INSTALL_DIR "share/cmake/TorchVision" CACHE STRING "install path for TorchVisionConfig.cmake")
 
 configure_package_config_file(cmake/TorchVisionConfig.cmake.in
