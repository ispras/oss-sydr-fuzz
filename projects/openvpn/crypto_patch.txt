diff --git a/src/openvpn/crypto.c b/src/openvpn/crypto.c
index b5ae17e..e9d8f5e 100644
--- a/src/openvpn/crypto.c
+++ b/src/openvpn/crypto.c
@@ -131,7 +131,10 @@ openvpn_encrypt_aead(struct buffer *buf, struct buffer work,
     ASSERT(buf_inc_len(&work, outlen));
 
     /* Flush the encryption buffer */
-    ASSERT(cipher_ctx_final(ctx->cipher, BEND(&work), &outlen));
+    //ASSERT(cipher_ctx_final(ctx->cipher, BEND(&work), &outlen));
+    if (!(cipher_ctx_final(ctx->cipher, BEND(&work), &outlen))) {
+        goto err;
+    }
     ASSERT(buf_inc_len(&work, outlen));
 
     /* Write authentication tag */
@@ -738,6 +741,7 @@ warn_insecure_key_type(const char *ciphername)
     }
 }
 
+extern int fuzz_success;
 /*
  * Build a struct key_type.
  */
@@ -756,6 +760,7 @@ init_key_type(struct key_type *kt, const char *ciphername,
     {
         if (!cipher_valid(ciphername))
         {
+	    fuzz_success = 0;
             msg(M_FATAL, "Cipher %s not supported", ciphername);
         }
 
@@ -768,15 +773,18 @@ init_key_type(struct key_type *kt, const char *ciphername,
 #endif
               ))
         {
+	    fuzz_success = 0;
             msg(M_FATAL, "Cipher '%s' mode not supported", ciphername);
         }
 
         if (OPENVPN_MAX_CIPHER_BLOCK_SIZE < cipher_kt_block_size(kt->cipher))
         {
+	    fuzz_success = 0;
             msg(M_FATAL, "Cipher '%s' not allowed: block size too big.", ciphername);
         }
         if (warn)
         {
+	    fuzz_success = 0;
             warn_insecure_key_type(ciphername);
         }
     }
@@ -784,6 +792,7 @@ init_key_type(struct key_type *kt, const char *ciphername,
     {
         if (warn)
         {
+	    fuzz_success = 0;
             msg(M_WARN, "******* WARNING *******: '--cipher none' was specified. "
                 "This means NO encryption will be performed and tunnelled "
                 "data WILL be transmitted in clear text over the network! "
@@ -803,6 +812,7 @@ init_key_type(struct key_type *kt, const char *ciphername,
 
             if (OPENVPN_MAX_HMAC_SIZE < hmac_length)
             {
+	        fuzz_success = 0;
                 msg(M_FATAL, "HMAC '%s' not allowed: digest size too big.", authname);
             }
         }
@@ -811,6 +821,7 @@ init_key_type(struct key_type *kt, const char *ciphername,
     {
         if (warn)
         {
+	    fuzz_success = 0;
             msg(M_WARN, "******* WARNING *******: '--auth none' was specified. "
                 "This means no authentication will be performed on received "
                 "packets, meaning you CANNOT trust that the data received by "
@@ -818,6 +829,7 @@ init_key_type(struct key_type *kt, const char *ciphername,
                 "PLEASE DO RECONSIDER THIS SETTING!");
         }
     }
+    fuzz_success = 1;
 }
 
 /* given a key and key_type, build a key_ctx */
@@ -994,6 +1006,7 @@ generate_key_random(struct key *key, const struct key_type *kt)
     } while (kt && !check_key(key, kt));
 
     gc_free(&gc);
+    fuzz_success = 1;
 }
 
 static void
@@ -1222,6 +1235,7 @@ read_key_file(struct key2 *key2, const char *file, const unsigned int flags)
         if (!buf_valid(&in))
         {
             msg(M_FATAL, "Read error on key file ('%s')", file);
+    		fuzz_success = 0;
         }
 
         size = in.len;
@@ -1314,6 +1328,7 @@ read_key_file(struct key2 *key2, const char *file, const unsigned int flags)
                         c, line_num,
                         print_key_filename(file, flags & RKF_INLINE), count,
                         onekeylen, keylen);
+    		    fuzz_success = 0;
                 }
             }
             ++line_index;
@@ -1336,6 +1351,7 @@ read_key_file(struct key2 *key2, const char *file, const unsigned int flags)
             msg(M_FATAL, "Insufficient key material or header text not found in file '%s' (%d/%d/%d bytes found/min/max)",
                 print_key_filename(file, flags & RKF_INLINE), count, onekeylen,
                 keylen);
+    		fuzz_success = 0;
         }
 
         if (state != PARSE_FINISHED)
@@ -1343,8 +1359,12 @@ read_key_file(struct key2 *key2, const char *file, const unsigned int flags)
             msg(M_FATAL, "Footer text not found in file '%s' (%d/%d/%d bytes found/min/max)",
                 print_key_filename(file, flags & RKF_INLINE), count, onekeylen,
                 keylen);
+    		fuzz_success = 0;
         }
     }
+    else {
+    		fuzz_success = 1;
+    }
 
     /* zero file read buffer if not an inline file */
     if (!(flags & RKF_INLINE))
