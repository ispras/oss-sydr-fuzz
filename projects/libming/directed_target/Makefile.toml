# Copyright 2025 ISP RAS
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
################################################################################

# Variables
[env]
PROJECT_DIR = { script = ["pwd"] }
EXAMPLE_DIR = { value = "/libming-CVE-2018-8807" }
DIFUZZ_DIR = { value = "/directed_target/sydr/difuzz", condition = { env_not_set = ["DIFUZZ_DIR"] } }
DIFUZZ_DIR_ABS = { script = ["realpath ${DIFUZZ_DIR}"] }
OUT_DIR = { value = "${PROJECT_DIR}", condition = { env_not_set = ["OUT_DIR"] } }
OUT_DIR_ABS = { script = ["realpath ${OUT_DIR}"] }
DIFUZZ_ARGS = { value = "-r main --weights reverse -o difuzz -j8 --analyse-icalls strong", condition = { env_not_set = ["DIFUZZ_ARGS"] } }
CARGO_TARGET_DIR = { value = "${PROJECT_DIR}/target", condition = { env_not_set = [
  "CARGO_TARGET_DIR",
] } }
PROFILE = { value = "release", condition = { env_not_set = ["PROFILE"] } }
LIBAFL_CC = '${DIFUZZ_DIR_ABS}/libafl_cc'
LIBAFL_CXX = '${DIFUZZ_DIR_ABS}/libafl_cxx'
FUZZER = '${DIFUZZ_DIR_ABS}/libafl_difuzz'
ETS_SHARED_MANAGER = '${DIFUZZ_DIR_ABS}/ETSSharedManager'
TARGET = '${OUT_DIR_ABS}/libming_libafl_target'

[tasks.unsupported]
script_runner = "@shell"
script = '''
echo "Cargo-make not integrated yet on this"
'''

[tasks.debug]
linux_alias = "debug_unix"
mac_alias = "debug_unix"
windows_alias = "unsupported"

[tasks.debug_unix]
script_runner = "@shell"
script = '''
cd ${PROJECT_DIR}
export LLVM_COMPILER=clang
export CC=clang; export CXX=clang++
export CFLAGS="-g"; export CXXFLAGS="$CFLAGS"
${PROJECT_DIR}/build_libafl_libming.sh
mv ${EXAMPLE_DIR}/build/util/swftophp ${OUT_DIR_ABS}/libming_sydr
'''

[tasks.casr]
linux_alias = "casr_unix"
mac_alias = "casr_unix"
windows_alias = "unsupported"

[tasks.casr_unix]
script_runner = "@shell"
script = '''
cd ${PROJECT_DIR}
export LLVM_COMPILER=clang
export CC=clang; export CXX=clang++
export CFLAGS="-g -fsanitize=address,integer,bounds,null,undefined,float-divide-by-zero"; export CXXFLAGS="$CFLAGS"
${PROJECT_DIR}/build_libafl_libming.sh
mv ${EXAMPLE_DIR}/build/util/swftophp ${OUT_DIR_ABS}/libming_casr
'''

[tasks.coverage]
linux_alias = "coverage_unix"
mac_alias = "coverage_unix"
windows_alias = "unsupported"

[tasks.coverage_unix]
script_runner = "@shell"
script = '''
cd ${PROJECT_DIR}
export LLVM_COMPILER=clang
export CC=clang; export CXX=clang++
export CFLAGS="-g -fprofile-instr-generate -fcoverage-mapping"; export CXXFLAGS="$CFLAGS"
python3 ${DIFUZZ_DIR_ABS}/insert_forkserver.py --sig -a insert -l c -f ${EXAMPLE_DIR}/util/main.c
${PROJECT_DIR}/build_libafl_libming.sh
mv ${EXAMPLE_DIR}/build/util/swftophp ${OUT_DIR_ABS}/libming_cov
python3 ${DIFUZZ_DIR_ABS}/insert_forkserver.py --sig -a remove -l c -f ${EXAMPLE_DIR}/util/main.c
'''

[tasks.difuzz]
linux_alias = "difuzz_unix"
mac_alias = "difuzz_unix"
windows_alias = "unsupported"

[tasks.difuzz_unix]
script_runner = "@shell"
script = '''
cd ${PROJECT_DIR}
export LLVM_COMPILER=clang
export CC=wllvm; export CXX=wllvm++
export CFLAGS="-g -fsanitize=address,integer,bounds,null,undefined,float-divide-by-zero"; export CXXFLAGS="$CFLAGS"
python3 ${DIFUZZ_DIR_ABS}/insert_forkserver.py -a insert -l c -f ${EXAMPLE_DIR}/util/main.c
python3 ${DIFUZZ_DIR_ABS}/insert_forkserver.py -a comment -l c -f ${EXAMPLE_DIR}/util/main.c
cd ${OUT_DIR_ABS}
${PROJECT_DIR}/build_libafl_libming.sh
${DIFUZZ_DIR_ABS}/difuzz -c ${PROJECT_DIR}/config.toml -b ${EXAMPLE_DIR}/build/util/swftophp -e ${OUT_DIR_ABS}/ets_libming.toml ${DIFUZZ_ARGS}
'''

# Harness
[tasks.target]
linux_alias = "target_unix"
mac_alias = "target_unix"
windows_alias = "unsupported"

[tasks.target_unix]
script_runner = "@shell"
script = '''
cd ${PROJECT_DIR}
export CC=${LIBAFL_CC}
export CXX=${LIBAFL_CXX}
export CFLAGS="-g -fsanitize=address,integer,bounds,null,undefined,float-divide-by-zero"; export CXXFLAGS="$CFLAGS"
${ETS_SHARED_MANAGER} -a remove -n libming
${ETS_SHARED_MANAGER} -a create -n libming
${ETS_SHARED_MANAGER} -a parse -n libming -i ${OUT_DIR_ABS}/ets_libming.toml
python3 ${DIFUZZ_DIR_ABS}/insert_forkserver.py -a uncomment -l c -f ${EXAMPLE_DIR}/util/main.c
export LIBAFL_SHARED_NAME="libming"
${PROJECT_DIR}/build_libafl_libming.sh
mv ${EXAMPLE_DIR}/build/util/swftophp ${OUT_DIR_ABS}/libming_libafl_target
${ETS_SHARED_MANAGER} -a dump -n libming -o ${OUT_DIR_ABS}/ets_libming.toml
${ETS_SHARED_MANAGER} -a remove -n libming
python3 ${DIFUZZ_DIR_ABS}/insert_forkserver.py -a remove -l c -f ${EXAMPLE_DIR}/util/main.c
'''
dependencies = ["difuzz"]

# Run the fuzzer
[tasks.run]
linux_alias = "run_unix"
mac_alias = "run_unix"
windows_alias = "unsupported"

[tasks.run_unix]
script_runner = "@shell"
script = '''
LIBAFL_DEBUG_OUTPUT=1 ${FUZZER} -- ${TARGET}
'''
dependencies = ["target"]

# Clean all built artifacts
[tasks.cleanall]
script_runner = "@shell"
script = '''
cd ${PROJECT_DIR}
rm -rf corpus crashes target difuzz *_libafl_target *_sydr *_casr *_cov ets_*.toml fuzzer.log target.log .cur_input*
pkill difuzz_ || true
'''

[tasks.all]
linux_alias = "all_unix"
mac_alias = "all_unix"
windows_alias = "unsupported"

[tasks.all_unix]
dependencies = ["target", "debug", "coverage", "casr"]
